// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_token     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  userLogs      UserLog[]
  moodEntries   MoodEntry[]
  journalEntries JournalEntry[]
  settings      UserSettings?
  goals         Goal[]
}

model UserLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model MoodEntry {
  id        String   @id @default(cuid())
  mood      Int
  emotions  String[]
  activities String[]
  energy    Int
  sleep     Float
  notes     String?  @db.Text
  aiInsights String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model JournalEntry {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  mood        String?
  weather     String?
  tags        String[]
  category    String
  isFavorite  Boolean  @default(false)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthlyGoal     Int      @default(10)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  category    String    // e.g., "Personal", "Health", "Career"
  status      String    // "In Progress", "Completed", "On Hold"
  priority    String    // "High", "Medium", "Low"
  dueDate     DateTime?
  progress    Int       @default(0) // 0-100
  milestones  Milestone[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Milestone {
  id          String    @id @default(cuid())
  title       String
  isCompleted Boolean   @default(false)
  dueDate     DateTime?
  goalId      String
  goal        Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([goalId])
}